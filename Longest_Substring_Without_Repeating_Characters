
Given a string s, find the length of the longest substring without duplicate characters.
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Solution-> 
# here I used iterator to perform shifting approach to find all the subsstrings

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        sub = ''
        count = 0
        maxS = []
        iterator = iter(range(1, len(s)))
        i=0

        if len(s)==0:
            return 0

        while(i<len(s)):
            if s[i] in sub:
                i = next(iterator)
                count = 0
                sub= ''

            sub+= s[i]
            count += 1
            maxS.append(count)
            i+=1
        return max(maxS)

